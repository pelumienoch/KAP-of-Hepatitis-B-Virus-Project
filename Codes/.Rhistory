# NEW name             # OLD name
rename("I dont know" = i_dont_know
)
View(combi)
### we can as well do a manual cleaning, see the code below
# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)
##################################################################################
combi <- combi %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename("I dont know" =  "I dont know",
"abdominal pain" = abdominal_pain,
"nausea and vomiting" = nausea_and_vomiting
)
View(combi)
View(combi)
View(combi)
combi <- import(here("combination2.sav"))
here()
View(combi)
combi <- combi %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename("I dont know" =  Idontknow_B,
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting
)
# CLEANING 'PIPE' CHAIN (starts with raw data and pipes it through cleaning steps)
##################################################################################
combi <- combi %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename("I dont know" =  Idontknow_B,
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting
)
ombi <- import(here("combination2.sav"))
####COMBINATION ANALYSIS for information source
combo <- import(here("combination2.sav"))
View(combo)
combo <- combo %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename("I dont know" =  Idontknow_B,
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting
)
combo <- combo %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename(
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting,
"I dont know" =  Idontknow_B
)
combo <- combo %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename(
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting,
"I dont know" = Idontknow_D
)
combo <- combo %>%
# standardize column name syntax
janitor::clean_names() %>%
# manually re-name columns
# NEW name             # OLD name
rename(
"abdominal pain" = abdominalpain,
"nausea and vomiting" = nauseaandvomiting,
)
# create column with the symptoms named, separated by semicolons
combo1<- combo %>%
mutate(`abdominal pain` = ifelse(`abdominal pain` == "1", "abdominal pain", NA),
fever = ifelse(fever == "1", "fever", NA),
fatigue = ifelse(fatigue == "1", "fatigue", NA),
`nausea and vomiting` = ifelse(`nausea and vomiting` == "1", "nausea and vomiting", NA),
jaundice = ifelse(jaundice == "1", "jaundice", NA)
)
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
symptoms_combination_list = as.list(strsplit(`symptoms combination` "; "))
View(combo1)
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
symptoms_combination_list = as.list(strsplit("symptoms combination" "; "))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
symptoms_combination_list = as.list(strsplit("symptoms combination" ";"))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
symptoms_combination_list = as.list(strsplit(symptoms_combination "; "))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
symptoms_combination_list = as.list(strsplit(Symptoms_combination "; "))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
Symptoms_combination_list = as.list(strsplit(Symptoms_combination "; "))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
Symptoms_combination_list = as.list(strsplit(Symptoms_combination, "; "))
)
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
Symptoms_combination_list = as.list(strsplit(Symptoms combination, "; "))
combo1<- combo1 %>%
unite(col = "Symptoms combination",
c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`),
sep = "; ",
remove = TRUE,
na.rm = TRUE) %>%
mutate(
# make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
Symptoms_combination_list = as.list(strsplit(`Symptoms combination`, "; "))
)
ggplot(
data = combio1,
mapping = aes(x = Symptoms_combination_list)) +
geom_bar() +
scale_x_upset(
reverse = FALSE,
n_intersections = 10,
sets = c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`))+
labs(
title = "Sources of Information about HBV",
subtitle = "10 most frequent combinations of sources of information",
caption = "Caption here.",
x = "Sources combination",
y = "Frequency in dataset")
ggplot(
data = combo1,
mapping = aes(x = Symptoms_combination_list)) +
geom_bar() +
scale_x_upset(
reverse = FALSE,
n_intersections = 10,
sets = c(`abdominal pain`, fever, fatigue, jaundice, `nausea and vomiting`))+
labs(
title = "Sources of Information about HBV",
subtitle = "10 most frequent combinations of sources of information",
caption = "Caption here.",
x = "Sources combination",
y = "Frequency in dataset")
ggplot(
data = combo1,
mapping = aes(x = Symptoms_combination_list)) +
geom_bar() +
scale_x_upset(
reverse = FALSE,
n_intersections = 10,
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"))+
labs(
title = "Sources of Information about HBV",
subtitle = "10 most frequent combinations of sources of information",
caption = "Caption here.",
x = "Sources combination",
y = "Frequency in dataset")
ggplot(
data = combo1,
mapping = aes(x = Symptoms_combination_list)) +
geom_bar() +
scale_x_upset(
reverse = FALSE,
n_intersections = 10,
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"))+
labs(
title = "Common symptoms of HBV as  reported by the participants",
subtitle = "10 most frequent combinations of symptoms",
caption = "Caption here.",
x = "Symptoms combination",
y = "Frequency")
combo2<- combo %>%
mutate(`abdominal pain` = ifelse(`abdominal pain` == "1", 1, 0),
fever = ifelse(fever == "1", 1, 0),
fatigue = ifelse(fatigue == "1", 1, 0),
`nausea and vomiting` = ifelse(`nausea and vomiting` == "1", 1, 0),
jaundice = ifelse(jaundice == "1", 1, 0)
)
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("blue", "red", "darkgreen", "yellow", "grey"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Sources combination",
sets.x.label = "Particpants sources of information")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 5.5,
line.size = 2,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 4,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = ,2
mainbar.y.label = "Symptoms combination",
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
# nsets = 3,
n_intersections = 10,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
# nsets = 3,
n_intersections = 10,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
n_intersections = 10,
# nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "10",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "on",
nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
combo2 %>%
UpSetR::upset(
sets = c("abdominal pain", "fever", "fatigue", "jaundice", "nausea and vomiting"),
order.by = "freq",
nintersects = 10,
sets.bar.color = c("red", "yellow", "blue", "grey", "darkgreen"), # optional colors
empty.intersections = "off",
nsets = 3,
number.angles = 0,
point.size = 3.5,
line.size = 1.5,
mainbar.y.label = "Symptoms combination",
sets.x.label = "knowledge of symptoms by participants")
pacman::p_load(
rio,        # importing data
here,       # relative file pathways
janitor,    # data cleaning and tables
lubridate,  # working with dates
matchmaker, # dictionary-based cleaning
epikit,     # age_categories() function
tidyverse,   # data management and visualization
gtsummary
)
pacman::p_load(
tidyverse,     # data management and visualization
UpSetR,        # special package for combination plots
ggupset)       # special package for combination plots
combi2 %>%
UpSetR::upset(
sets = c("SchoolUniversity", "HealthProfessionals", "FamilyFriends", "MediaTVRadioInternet", "Other"),
order.by = "freq",
sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange"), # optional colors
empty.intersections = "on",
# nsets = 3,
nintersects = 10,   # number of bars to plot, in this case, plot the top 10
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Sources combination",
sets.x.label = "Particpants sources of information")
combi2 %>%
UpSetR::upset(
sets = c("insufficientmoney_A", "lackofinformation", "lackoftime", "fearofpositivetest", "Idontknow_A", "notconsiderednecessary"),
order.by = "freq",
sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange", "purple"), # optional colors
empty.intersections = "on",
# nsets = 3,
nintersects = 10,   # number of bars to plot, in this case, plot the top 10
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Reason combination",
sets.x.label = "Particpants reasons for not testing for HBV")
combi2 %>%
UpSetR::upset(
sets = c("insufficientmoney_A", "lackofinformation", "lackoftime", "fearofpositivetest", "Idontknow_A", "notconsiderednecessary"),
order.by = "freq",
sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange", "purple"), # optional colors
empty.intersections = "on",
# nsets = 3,
nintersects = 12,   # number of bars to plot, in this case, plot the top 10
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Reason combination",
sets.x.label = "Particpants reasons for not testing for HBV")
combi2 %>%
UpSetR::upset(
sets = c("unawareofthevaccine", "fearofneedles", "insufficientmoney", "fearofsideeffects", "Idontknow", "Notconsiderednecessary_A"),
order.by = "freq",
sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange", "purple"), # optional colors
empty.intersections = "on",
# nsets = 3,
nintersects = 12,   # number of bars to plot, in this case, plot the top 10
number.angles = 0,
point.size = 3.5,
line.size = 2,
mainbar.y.label = "Reason combination",
sets.x.label = "Particpants reasons for not being vaccinated")
